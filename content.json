{"meta":{"title":"Helaxest","subtitle":"Helaxestの博客","description":"本科 | 计算机科学与技术 | 软件工程","author":"Helaxest","url":"https://github.com/helaxest","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-10-15T08:21:59.064Z","comments":true,"path":"404.html","permalink":"https://github.com/helaxest/404.html","excerpt":"","text":""},{"title":"","date":"2022-10-15T08:21:59.301Z","updated":"2022-10-15T08:21:59.301Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://github.com/helaxest/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2022-10-15T08:21:59.305Z","updated":"2022-10-15T08:21:59.305Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://github.com/helaxest/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-10-15T08:21:59.121Z","comments":true,"path":"List/index.html","permalink":"https://github.com/helaxest/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-10-15T08:21:59.299Z","comments":true,"path":"about/index.html","permalink":"https://github.com/helaxest/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-10-15T08:21:59.300Z","comments":true,"path":"archives/index.html","permalink":"https://github.com/helaxest/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-10-15T08:21:59.302Z","comments":true,"path":"categories/index.html","permalink":"https://github.com/helaxest/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-10-15T08:21:59.302Z","comments":true,"path":"census/index.html","permalink":"https://github.com/helaxest/census/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2022-10-15T08:21:59.304Z","comments":true,"path":"contact/index.html","permalink":"https://github.com/helaxest/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 Luckeyの友链信息 博客名称: Luckeyの博客 博客网址: http://www.luckyzmj.cn 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: The harder you work, the luckier you will be"},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-10-15T08:21:59.304Z","comments":true,"path":"friends/index.html","permalink":"https://github.com/helaxest/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-10-15T08:21:59.306Z","comments":true,"path":"resource/index.html","permalink":"https://github.com/helaxest/resource/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-10-15T08:21:59.315Z","comments":true,"path":"tags/index.html","permalink":"https://github.com/helaxest/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-10-15T08:21:59.089Z","updated":"2022-10-15T08:21:59.089Z","comments":true,"path":"List/galleries/index.html","permalink":"https://github.com/helaxest/List/galleries/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-10-15T08:21:59.122Z","comments":true,"path":"List/movies/index.html","permalink":"https://github.com/helaxest/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-10-15T08:21:59.123Z","comments":true,"path":"List/music/index.html","permalink":"https://github.com/helaxest/List/music/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-10-15T08:21:59.124Z","comments":true,"path":"List/tools/index.html","permalink":"https://github.com/helaxest/List/tools/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-10-15T08:21:59.102Z","updated":"2022-10-15T08:21:59.102Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://github.com/helaxest/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-10-15T08:21:59.103Z","updated":"2022-10-15T08:21:59.103Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://github.com/helaxest/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-10-15T08:21:59.104Z","updated":"2022-10-15T08:21:59.104Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://github.com/helaxest/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-10-15T08:21:59.106Z","updated":"2022-10-15T08:21:59.106Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://github.com/helaxest/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-10-15T08:21:59.105Z","updated":"2022-10-15T08:21:59.105Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://github.com/helaxest/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-10-15T08:21:59.116Z","updated":"2022-10-15T08:21:59.116Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://github.com/helaxest/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-10-15T08:21:59.118Z","updated":"2022-10-15T08:21:59.118Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://github.com/helaxest/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-10-15T08:21:59.118Z","updated":"2022-10-15T08:21:59.118Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://github.com/helaxest/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-10-15T08:21:59.119Z","updated":"2022-10-15T08:21:59.119Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://github.com/helaxest/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-10-15T08:21:59.120Z","updated":"2022-10-15T08:21:59.120Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://github.com/helaxest/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-10-15T08:21:59.121Z","updated":"2022-10-15T08:21:59.121Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://github.com/helaxest/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-10-15T08:21:59.121Z","updated":"2022-10-15T08:21:59.121Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://github.com/helaxest/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"mybatis-快速入门","slug":"mybatis-快速入门","date":"2022-10-18T02:35:14.000Z","updated":"2022-10-18T07:49:03.061Z","comments":true,"path":"2022/10/18/mybatis-kuai-su-ru-men/","link":"","permalink":"https://github.com/helaxest/2022/10/18/mybatis-kuai-su-ru-men/","excerpt":"","text":"0x001 什么是mybatis MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。0x002 快速入门准备好数据库，创建好表和数据，使用maven导入mybatis坐标，创建相应pojo类1、导入sql脚本，创建数据库 DROP TABLE IF EXISTS `tb_brand`; CREATE TABLE `tb_brand` ( `id` int(11) NOT NULL AUTO_INCREMENT, `brand_name` varchar(20) DEFAULT NULL, `company_name` varchar(20) DEFAULT NULL, `ordered` int(11) DEFAULT NULL, `description` varchar(100) DEFAULT NULL, `status` int(11) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of tb_brand -- ---------------------------- INSERT INTO `tb_brand` VALUES ('10', '海澜之家', '海澜之家', '5000', '男人的衣柜', '0'); -- ---------------------------- -- Table structure for tb_user -- ---------------------------- DROP TABLE IF EXISTS `tb_user`; CREATE TABLE `tb_user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(20) DEFAULT NULL, `password` varchar(20) DEFAULT NULL, `gender` char(1) DEFAULT NULL, `addr` varchar(30) DEFAULT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8; -- ---------------------------- -- Records of tb_user -- ---------------------------- INSERT INTO `tb_user` VALUES ('2', '李四', '234', '女', '天津'); INSERT INTO `tb_user` VALUES ('3', '王五', '11', '男', '西安'); INSERT INTO `tb_user` VALUES ('5', '王八蛋', '12345', '男', 'w'); INSERT INTO `tb_user` VALUES ('6', '王八蛋', '12345', '男', 'w'); 2、导入maven坐标 &lt;!-- mybatis --&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.6&lt;/version&gt; &lt;/dependency&gt; &lt;!--连接mysql数据库 --&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.47&lt;/version&gt; &lt;/dependency&gt; &lt;!-- junit4测试--&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.13.1&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; 3、创建pojo类Brand public class Brand { // id 主键 private Integer id; // 品牌名称 private String brandName; // 企业名称 private String companyName; // 排序字段 private Integer ordered; // 描述信息 private String description; // 状态：0：禁用 1：启用 private Integer status; } 配置mybatis核心配置文件mybatis-config.xml，以及数据库配置1、mybatis-config.xml &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-config.dtd\"&gt; &lt;configuration&gt; &lt;!--连接数据库的配置文件--&gt; &lt;properties resource=\"jdbc.properties\"&gt;&lt;/properties&gt; &lt;!--配置驼峰命名--&gt; &lt;settings&gt; &lt;setting name=\"mapUnderscoreToCamelCase\" value=\"true\"/&gt; &lt;/settings&gt; &lt;environments default=\"development\"&gt; &lt;environment id=\"development\"&gt; &lt;transactionManager type=\"JDBC\"/&gt; &lt;dataSource type=\"POOLED\"&gt; &lt;property name=\"driver\" value=\"${driver}\"/&gt; &lt;property name=\"url\" value=\"${url}\"/&gt; &lt;property name=\"username\" value=\"${username}\"/&gt; &lt;property name=\"password\" value=\"${password}\"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;!-- 配置mapper接口映射文件, 按包配置--&gt; &lt;package name=\"com.demo.mapper\"&gt;&lt;/package&gt; &lt;/mappers&gt; &lt;/configuration&gt; 2、配置数据库连接配置jdbc.properties driver=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/mybatis?useSSL=true username=root password=root 编写接口以及对应的mapper.xml1、编写接口BrandMapper public interface BrandMapper { //查询所有Brand List&lt;Brand&gt; selectAll(); } 2、编写BrandMapper.xml &lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt; &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"https://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt; &lt;mapper namespace=\"com.demo.mapper.BrandMapper\"&gt; &lt;select id=\"selectAll\" resultType=\"com.demo.pojo.Brand\"&gt; select * from tb_brand &lt;/select&gt; &lt;/mapper&gt; 测试连接，编写test类public class MyTest { @Test public void test1() throws IOException { String resource = \"mybatis-config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); System.out.println(\"获取的连接\"+sqlSession); } @Test public void test2() throws IOException { String resource = \"mybatis-config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); SqlSession sqlSession = sqlSessionFactory.openSession(); BrandMapper mapper = sqlSession.getMapper(BrandMapper.class); mapper.selectAll().forEach(System.out::println); } } 测试结果 搭建框架过程中可能会遇到异常情况,使用mapper.xml文件映射接口，配置无误，但是仍然出现以下错误可能的原因如下如上图所示，因为mapper.xml在src\\main\\java下，而不是在resources下，导致target不能包含它们解决方法在pom.xml &lt; build&gt;标签中加: &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;false&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;","categories":[{"name":"框架篇","slug":"框架篇","permalink":"https://github.com/helaxest/categories/%E6%A1%86%E6%9E%B6%E7%AF%87/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://github.com/helaxest/tags/MyBatis/"}],"author":"Helaxest"},{"title":"JDK动态代理","slug":"JDK动态代理","date":"2022-10-17T12:15:01.000Z","updated":"2022-10-18T02:07:11.960Z","comments":true,"path":"2022/10/17/jdk-dong-tai-dai-li/","link":"","permalink":"https://github.com/helaxest/2022/10/17/jdk-dong-tai-dai-li/","excerpt":"","text":"0x001 什么是代理 就是增强一个对象的功能。 0x002 Java中实现代理的方法 java中的代理分两种，一种是静态代理，还有一种是动态代理。 0x003 动态代理 1、创建一个接口AInterface public interface AInterface { void method1(); } 2、创建实现接口AInterface的类A public class A implements AInterface{ @Override public void method1() { System.out.println(\"执行method1。。。。\"); } } 3、jdk动态代理主要使用Proxy类的方法newProxyInstance public class Demo { public static void main(String[] args) { //创建被代理的对象 A a = new A(); //获取被代理对象类的类加载器 ClassLoader classLoader = A.class.getClassLoader(); //获取被代理对象类的实现所有接口Class对象 Class[] interfaces = {AInterface.class}; //对被代理对象进行功能增强，实现InvocationHandler接口 InvocationHandler handler = new InvocationHandler() { /** * * @param proxy 生成的被代理的对象 * @param method 增强的方法 * @param args 增强方法的形参 * @return method.invoke(a)的返回值, 没有返回值则为null * @throws Throwable */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { if (method.getName().endsWith(\"method1\")) { System.out.println(\"进行功能增强\"); Object invoke = method.invoke(a); System.out.println(\"进行功能增强\"); return invoke; } return null; } }; //使用被代理类Proxy的newInstance方法创建被代理的对象 AInterface proxy = (AInterface) Proxy.newProxyInstance(classLoader, interfaces, handler); //用生成的代理对象调用增强的功能 proxy.method1(); } } 0x003 动态代理结果演示","categories":[{"name":"技术篇","slug":"技术篇","permalink":"https://github.com/helaxest/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"}],"tags":[{"name":"jdk","slug":"jdk","permalink":"https://github.com/helaxest/tags/jdk/"},{"name":"动态代理","slug":"动态代理","permalink":"https://github.com/helaxest/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"}],"author":"Helaxest"}],"categories":[{"name":"框架篇","slug":"框架篇","permalink":"https://github.com/helaxest/categories/%E6%A1%86%E6%9E%B6%E7%AF%87/"},{"name":"技术篇","slug":"技术篇","permalink":"https://github.com/helaxest/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"}],"tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://github.com/helaxest/tags/MyBatis/"},{"name":"jdk","slug":"jdk","permalink":"https://github.com/helaxest/tags/jdk/"},{"name":"动态代理","slug":"动态代理","permalink":"https://github.com/helaxest/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"}]}